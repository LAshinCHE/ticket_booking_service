version: "3.8"

services:
  booking-service:
    build: ./booking-service
    ports:
      - "8081:8081"
    depends_on:
      - jaeger
      - otel-collector
      - temporal
      - booking-db
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - JAEGER_ENDPOINT=jaeger:14250
      - TEMPORAL_ADDRESS=temporal:7233
      - DB_HOST=booking-db
      - DB_PORT=5432
      - DATABASE_URL=postgresql://booking:bookingpass@booking-db:5432/bookingdb?sslmode=disable
    networks:
      - monitoring

  ticket-service:
    build: ./ticket-service
    ports:
      - "8082:8082"
    depends_on:
      - jaeger
      - temporal
      - ticket-db
    environment:
      - JAEGER_ENDPOINT=jaeger:4318
      - DB_HOST=ticket-db
      - DB_PORT=5432
      - DATABASE_URL=postgresql://ticket:ticketpass@ticket-db:5432/ticketdb?sslmode=disable
    networks:
      - monitoring
  payment-service:
    build: ./payment-service
    ports:
      - "8083:8083"
    depends_on:
      - jaeger
      - payment-db
    environment:
      - DB_HOST=payment-db
      - DB_PORT=5432
      - DATABASE_URL=postgresql://payment:paymentpass@payment-db:5432/paymentdb?sslmode=disable
      - JAEGER_ENDPOINT=jaeger:4318
    networks:
      - monitoring
  
  notification-service:
    build: ./notification-service
    depends_on:
      - jaeger
    ports:
      - "8084:8084"
    environment:
      - JAEGER_ENDPOINT=jaeger:4318
    networks:
      - monitoring

  saga-service:
    build: ./saga-service
    ports:
      - "8085:8085"
    depends_on:
      - temporal
      - jaeger
    environment:
      - JAEGER_ENDPOINT=jaeger:4318
      - TEMPORAL_ADDRESS=temporal:7233
    restart: unless-stopped
    networks:
    - monitoring

  booking-db:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: booking
      POSTGRES_PASSWORD: bookingpass
      POSTGRES_DB: bookingdb
    ports:
      - "5431:5432"
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "booking", "-d", "bookingdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  ticket-db:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: ticket
      POSTGRES_PASSWORD: ticketpass
      POSTGRES_DB: ticketdb
    ports:
      - "5433:5432"
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "ticket", "-d", "ticketdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      

  payment-db:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: payment
      POSTGRES_PASSWORD: paymentpass
      POSTGRES_DB: paymentdb
    ports:
      - "5434:5432"
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "payment", "-d", "paymentdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./config/otelcol/otel-collector-config.yaml:/etc/otelcol/config.yaml
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
      - "9464:9464"  # Prometheus metrics (опционально)
    networks:
      - monitoring

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # только UI
    networks:
      - monitoring


  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
    networks:
      - monitoring
  
  # loki:
  #   image: grafana/loki:2.9.0
  #   ports:
  #     - "3100:3100"
  #   command: -config.file=/etc/loki/local-config.yaml
  #   volumes:
  #     - ./config/loki/loki-config.yaml:/etc/loki/local-config.yaml
  # promtail:
  #   image: grafana/promtail:2.9.0
  #   volumes:
  #     - /var/log:/var/log
  #     - ./config/loki/promtail-config.yaml:/etc/promtail/config.yaml
  #   command: -config.file=/etc/promtail/config.yaml

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - monitoring
    volumes:
      - grafana_data:/var/lib/grafana
    # depends_on:
    #   - loki
  temporal:
      image: temporalio/auto-setup:1.22
      ports:
        - "7233:7233"
      environment:
        - DB=postgresql
        - DB_PORT=5432
        - POSTGRES_USER=temporal
        - POSTGRES_PWD=temporal
        - POSTGRES_SEEDS=temporal-db
      depends_on:
        - temporal-db
      networks:
      - monitoring
      
  temporal-db:
    image: postgres:13
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      POSTGRES_USER: temporal
      POSTGRES_PASSWORD: temporal
      POSTGRES_DB: temporal
    ports:
      - "5432:5432"
    volumes:
      - temporal_pgdata:/var/lib/postgresql/data
    networks:
    - monitoring

  temporal-web:
    image: temporalio/web:latest
    ports:
      - "8088:8088"
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal:7233
    depends_on:
      - temporal
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge

volumes:
  grafana_data:
  prometheus_data:
  temporal_pgdata:
